<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TryIT.SqlAdoService</name>
    </assembly>
    <members>
        <member name="T:TryIT.SqlAdoService.AdoConfig">
            <summary>
            required configuration for SQL ADO
            </summary>
        </member>
        <member name="P:TryIT.SqlAdoService.AdoConfig.ConnectionString">
            <summary>
            the connection string to database
            </summary>
        </member>
        <member name="P:TryIT.SqlAdoService.AdoConfig.TimeoutSecond">
            <summary>
            the timeout second for connection
            </summary>
        </member>
        <member name="T:TryIT.SqlAdoService.SqlAdoExtension">
            <summary>
            extension method for SQL ADO, e.g. parse value to <see cref="F:System.DBNull.Value"/>
            </summary>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoExtension.ToDBNull(System.String)">
            <summary>
            convert value to <see cref="F:System.DBNull.Value"/> if <paramref name="value"/> is NULL or Empty
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoExtension.ToDBNull(System.Nullable{System.Int32},System.Int32[])">
            <summary>
            convert value to <see cref="F:System.DBNull.Value"/> if <paramref name="value"/> is NULL or exists in <paramref name="nullValues"/>
            </summary>
            <param name="value"></param>
            <param name="nullValues"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoExtension.ToDBNull(System.Nullable{System.Decimal},System.Decimal[])">
            <summary>
            convert value to <see cref="F:System.DBNull.Value"/> if <paramref name="value"/> is NULL or exists in <paramref name="nullValues"/>
            </summary>
            <param name="value"></param>
            <param name="nullValues"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoExtension.ToDBNull(System.Nullable{System.DateTime})">
            <summary>
            return DBNull.Value if <paramref name="value"/> is NULL or year is 1900
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoExtension.ConvertValue``1(System.Object)">
            <summary>
            Convert object value to specific type value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="T:TryIT.SqlAdoService.SqlAdoObject">
            <summary>
            operate database via objective SQL ADO method
            </summary>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoObject.#ctor(TryIT.SqlAdoService.AdoConfig)">
            <summary>
            init SQL ADO configuration, e.g. connection, timeout second
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoObject.FetchDataTable(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Get DataTable based on provided SqlCommand script, it can be query script or store procedure
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoObject.FetchDataSet(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Get DataSet based on provided SqlCommand script, it can be query script or store procedure
            </summary>
            <param name="cmdText"></param>
            <param name="cmdType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoObject.FetchScalarFunction``1(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Call Scalar Value Function, return the value, Function Name, must include schema,
            <para>SELECT schema.FunctionName(@parameter1, @parameter2, @parameter3, ...)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="function"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoObject.FetchDataTableFunction(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            fetch table data by function. function name must include schema.
            <para>SELECT schema.FunctionName(@parameter1, @parameter2, @parameter3, ...)</para>
            </summary>
            <param name="function"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoObject.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a Transact-SQL statement and returns the number of rows affected.
            </summary>
            <param name="cmdText"></param>
            <param name="cmdType"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoObject.ExecuteNonQuery_withConnection(System.String,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            For other MSSQL DB, Executes a Transact-SQL statement and returns the number of rows affected.
            </summary>
            <param name="connnectionString"></param>
            <param name="cmdText"></param>
            <param name="cmdType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoObject.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText"></param>
            <param name="cmdType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoObject.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Sends the System.Data.SqlClient.SqlCommand.CommandText to the System.Data.SqlClient.SqlCommand.Connection, and builds a System.Data.SqlClient.SqlDataReader using one of the System.Data.CommandBehavior values.
            </summary>
            <param name="cmdText"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:TryIT.SqlAdoService.SqlAdoStatic">
            <summary>
            operate database via static SQL ADO method
            </summary>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoStatic.InitConfig(TryIT.SqlAdoService.AdoConfig)">
            <summary>
            init SQL ADO configuration, e.g. connection, timeout second
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoStatic.FetchDataTable(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Get DataTable based on provided SqlCommand script, it can be query script or store procedure
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoStatic.FetchDataSet(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Get DataSet based on provided SqlCommand script, it can be query script or store procedure
            </summary>
            <param name="cmdText"></param>
            <param name="cmdType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoStatic.FetchScalarFunction``1(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Call Scalar Value Function, return the value, Function Name, must include schema,
            <para>SELECT schema.FunctionName(@parameter1, @parameter2, @parameter3, ...)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="function"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoStatic.FetchDataTableFunction(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            fetch table data by function. function name must include schema.
            <para>SELECT schema.FunctionName(@parameter1, @parameter2, @parameter3, ...)</para>
            </summary>
            <param name="function"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoStatic.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a Transact-SQL statement and returns the number of rows affected.
            </summary>
            <param name="cmdText"></param>
            <param name="cmdType"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoStatic.ExecuteNonQuery_withConnection(System.String,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            For other MSSQL DB, Executes a Transact-SQL statement and returns the number of rows affected.
            </summary>
            <param name="connnectionString"></param>
            <param name="cmdText"></param>
            <param name="cmdType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoStatic.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText"></param>
            <param name="cmdType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TryIT.SqlAdoService.SqlAdoStatic.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Sends the System.Data.SqlClient.SqlCommand.CommandText to the System.Data.SqlClient.SqlCommand.Connection, and builds a System.Data.SqlClient.SqlDataReader using one of the System.Data.CommandBehavior values.
            </summary>
            <param name="cmdText"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
    </members>
</doc>
