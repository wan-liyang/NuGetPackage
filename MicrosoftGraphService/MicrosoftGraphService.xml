<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MicrosoftGraphService</name>
    </assembly>
    <members>
        <member name="T:MicrosoftGraphService.Config.MsGraphApiConfig">
            <summary>
            Config information use for application perform graph api request
            </summary>
        </member>
        <member name="T:MicrosoftGraphService.Config.MsGraphGetTokenConfig">
            <summary>
            Config information use for application obtain Token
            </summary>
        </member>
        <member name="M:MicrosoftGraphService.ExtensionHelper.ExtensionMethod.JsonToObject``1(System.String)">
            <summary>
            covnert Json string to specific object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.ExtensionHelper.ExtensionMethod.ObjectToJson(System.Object)">
            <summary>
            convert object to Json string
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:MicrosoftGraphService.ExtensionHelper.MIMEType.BIN">
            <summary>
            Any kind of binary data
            </summary>
        </member>
        <member name="F:MicrosoftGraphService.ExtensionHelper.MIMEType.XLS">
            <summary>
            Microsoft Excel
            </summary>
        </member>
        <member name="F:MicrosoftGraphService.ExtensionHelper.MIMEType.XLSX">
            <summary>
            Microsoft Excel (OpenXML)
            </summary>
        </member>
        <member name="F:MicrosoftGraphService.ExtensionHelper.MIMEType.CSV">
            <summary>
            Comma-separated values (CSV)
            </summary>
        </member>
        <member name="M:MicrosoftGraphService.ExtensionHelper.MIMEType.GetContentType(System.String)">
            <summary>
            get content type by fileName.
            <para>default application/octet-stream</para>
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.Helper.MsGraphTeamHelper.GetMembers(System.String,System.String)">
            <summary>
            get list members of team, the <paramref name="userEmail"/> need be in the team, so that have permission to get the list
            </summary>
            <param name="teamName"></param>
            <param name="userEmail"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.Helper.MsGraphTeamHelper.RemoveMember(System.String,System.String,System.String)">
            <summary>
            remove member from team by <paramref name="membershipId"/>
            </summary>
            <param name="teamName"></param>
            <param name="userEmail"></param>
            <param name="membershipId"></param>
        </member>
        <member name="M:MicrosoftGraphService.Helper.MsGraphUserHelper.GetUserInfo(System.String)">
            <summary>
            get user info, if <paramref name="userEmail"/> is empty, get me
            </summary>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="T:MicrosoftGraphService.Helper.TokenHelper">
            <summary>
            this token helper use approach from https://docs.microsoft.com/en-us/graph/auth-v2-user
            </summary>
        </member>
        <member name="T:MicrosoftGraphService.Helper.GetTokenResponse">
            <summary>
            refer to https://docs.microsoft.com/en-us/graph/auth-v2-user for detail explanation for each response parameter
            </summary>
        </member>
        <member name="P:MicrosoftGraphService.Helper.GetTokenResponse.token_type">
            <summary>
            Indicates the token type value. The only type that Azure AD supports is Bearer.
            </summary>
        </member>
        <member name="P:MicrosoftGraphService.Helper.GetTokenResponse.scope">
            <summary>
            A space separated list of the Microsoft Graph permissions that the access_token is valid for.
            </summary>
        </member>
        <member name="P:MicrosoftGraphService.Helper.GetTokenResponse.expires_in">
            <summary>
            How long the access token is valid (in seconds).
            </summary>
        </member>
        <member name="P:MicrosoftGraphService.Helper.GetTokenResponse.access_token">
            <summary>
            The requested access token. Your app can use this token to call Microsoft Graph.
            </summary>
        </member>
        <member name="P:MicrosoftGraphService.Helper.GetTokenResponse.refresh_token">
            <summary>
            An OAuth 2.0 refresh token. Your app can use this token to acquire additional access tokens after the current access token expires. Refresh tokens are long-lived, and can be used to retain access to resources for extended periods of time. For more detail, refer to the v2.0 token reference (https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-tokens).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MicrosoftGraphService.Helper.GetTokenResponse.issue_on" -->
        <member name="P:MicrosoftGraphService.Helper.GetTokenResponse.expires_on">
            <summary>
            store current access_token expire time (normally is one hour from current request)
            </summary>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.BaseHelper.GetJsonHttpContent(System.Object)">
            <summary>
            get application/json HttpContent
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.SharePointHelper.GetSite(System.String,System.String)">
            <summary>
            get site info, https://graph.microsoft.com/v1.0/sites/groupncs.sharepoint.com:/sites/O365-IPMS469-NCS
            </summary>
            <param name="hostname"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.SharePointHelper.GetFileByName(System.String,System.String,System.String)">
            <summary>
            get specific file under the folder
            </summary>
            <param name="siteId"></param>
            <param name="driveItemId"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.SharePointHelper.GetItemById(System.String,System.String)">
            <summary>
            get SharePoint DirveItem by Id, <paramref name="itemId"/> is SharePoint DriveItem Unique Id 
            </summary>
            <param name="siteId"></param>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.SharePointHelper.CreateItemPreviewLink(System.String,System.String)">
            <summary>
            create Preview link for drive item, it can be use in iframe
            </summary>
            <param name="siteId"></param>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.SharePointHelper.UploadFile(MicrosoftGraphService.Model.SharePointModel.SiteUploadFileModel)">
            <summary>
            upload file into sharepoint, if file size less than 4 MB, use normal upload, otherwise use upload session 
            </summary>
            <param name="fileModule"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MicrosoftGraphService.HttpClientHelper.SharePointHelper.UploadNormalFile(MicrosoftGraphService.Model.SharePointModel.SiteUploadFileModel)" -->
        <member name="M:MicrosoftGraphService.HttpClientHelper.SharePointHelper.UploadLargeFile(MicrosoftGraphService.Model.SharePointModel.SiteUploadFileModel)">
            <summary>
            if file over 4 MB, use resumable upload session
            <para>https://docs.microsoft.com/en-us/graph/api/driveitem-createuploadsession?view=graph-rest-1.0</para>
            </summary>
            <param name="fileModule"></param>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.SharePointHelper.DeleteItemById(System.String,System.String)">
            <summary>
            delete SharePoint DirveItem by Id, <paramref name="itemId"/> is SharePoint DriveItem Unique Id 
            </summary>
            <param name="siteId"></param>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.SharePointHelper.GetFileContent(System.String,System.String)">
            <summary>
            get file content in byte[] by fileId
            </summary>
            <param name="siteId"></param>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="T:MicrosoftGraphService.HttpClientHelper.TeamHelper">
            <summary>
            Use the Microsoft Graph API to work with Microsoft Teams
            https://docs.microsoft.com/en-us/graph/api/resources/teams-api-overview?view=graph-rest-1.0
            </summary>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.TeamHelper.GetJoinedTeam(System.String)">
            <summary>
            get specific user joinded teams, if <paramref name="userEmail"/> is empty, then get my joined teams
            </summary>
            <param name="userEmail"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.TeamHelper.GetMembers(System.String)">
            <summary>
            get team member list
            </summary>
            <param name="teamId"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.TeamHelper.AddMember(System.String,MicrosoftGraphService.Model.TeamAddMemberModel)">
            <summary>
            Add a member to a team using user principal name
            </summary>
            <param name="teamId"></param>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.TeamHelper.RemoveMember(System.String,System.String)">
            <summary>
            Remove member from team
            </summary>
            <param name="teamId"></param>
            <param name="membershipId"></param>
        </member>
        <member name="M:MicrosoftGraphService.HttpClientHelper.UserHelper.GetUserInfo(System.String)">
            <summary>
            get user info, if <paramref name="userEmail"/> is empty, get me
            </summary>
            <param name="userEmail"></param>
            <returns></returns>
        </member>
        <member name="P:MicrosoftGraphService.Model.SharePointCreateFolderModel.ConflictBehavior">
            <summary>
            The conflict resolution behavior for actions that create a new item. You can use the values fail, replace, or rename. The default for PUT is replace. An item will never be returned with this annotation. Write-only.
            </summary>
        </member>
        <member name="P:MicrosoftGraphService.Model.CreateUploadSessionRequestBody.Name">
            <summary>
            file name
            </summary>
        </member>
        <member name="M:MicrosoftGraphService.MsGraphService.SharePoint.UploadFileByFolderUrl(System.String,System.String,System.String,System.String,System.Byte[])">
            <summary>
            upload file into SharePoint by folder absolute url
            </summary>
            <param name="hostName"></param>
            <param name="siteName"></param>
            <param name="folderAbsoluteUrl"></param>
            <param name="fileName"></param>
            <param name="fileContent"></param>
            <returns>created SharePoint item (Id and Name)</returns>
        </member>
        <member name="M:MicrosoftGraphService.MsGraphService.SharePoint.UploadFileByFolderId(System.String,System.String,System.String,System.String,System.Byte[])">
            <summary>
            upload file into SharePoint by folder unique Id
            </summary>
            <param name="hostName"></param>
            <param name="siteName"></param>
            <param name="folderId"></param>
            <param name="fileName"></param>
            <param name="fileContent"></param>
            <returns>created SharePoint item (Id and Name)</returns>
        </member>
        <member name="M:MicrosoftGraphService.MsGraphService.SharePoint.GetFileContentByFileId(System.String,System.String,System.String)">
            <summary>
            get file content from SharePoint by fileId
            </summary>
            <param name="hostName"></param>
            <param name="siteName"></param>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.MsGraphService.SharePoint.GetFileByName(System.String,System.String,System.String,System.String)">
            <summary>
            get file from SharePoint by specific file name, e.g. fileName = "test.xlsx"
            </summary>
            <param name="hostName"></param>
            <param name="siteName"></param>
            <param name="folderAbsUrl"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.MsGraphService.SharePoint.GetFileById(System.String,System.String,System.String)">
            <summary>
            get file from SharePoint by the sharepoint unique id
            </summary>
            <param name="hostName"></param>
            <param name="siteName"></param>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.MsGraphService.SharePoint.DeleteFileByFileId(System.String,System.String,System.String,System.Boolean)">
            <summary>
            delete file from SharePoint, return true if delete success, otherwise return false
            </summary>
            <param name="hostName"></param>
            <param name="siteName"></param>
            <param name="fileId">the File SharePoint Unique Id</param>
            <param name="isDeleteFolderIfEmpty">indicator to remove folder if it become empty after file deleted</param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.MsGraphService.SharePoint.CreateFolder(System.String,System.String,System.String,System.String)">
            <summary>
            create new SharePoint folder under <paramref name="parentFolderAbsUrl"/>, 
            <para>set <paramref name="folderNameOrPath"/> to "NewFolderName" to create a new folder</para>
            <para>set <paramref name="folderNameOrPath"/> to "NewFolderName\NewSubFolderName" to create a new folder and sub folder</para>
            </summary>
            <param name="hostName"></param>
            <param name="siteName"></param>
            <param name="parentFolderAbsUrl"></param>
            <param name="folderNameOrPath"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.MsGraphService.User.GetUser(System.String)">
            <summary>
            get user info, if <paramref name="userEmail"/> is empty, get me
            </summary>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.MsGraphService.Team.GetMembers(System.String,System.String)">
            <summary>
            get list members of team, the <paramref name="userEmail"/> need be in the team, so that have permission to get the list
            </summary>
            <param name="teamName"></param>
            <param name="userEmail"></param>
            <returns></returns>
        </member>
        <member name="M:MicrosoftGraphService.MsGraphService.Outlook.GetMessages(System.String,System.String)">
            <summary>
            get message of user
            </summary>
            <param name="user">'Me' or specific email address, default is Me if pass empty</param>
            <param name="folder">'Index' or specific folder, default is Index if pass empty</param>
            <returns></returns>
        </member>
    </members>
</doc>
